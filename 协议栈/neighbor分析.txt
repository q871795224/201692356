全局变量：
Now:类型：struct timeval;作用：记录当前时间；
rt: 类型：rt_table*；作用：路由表，初始值为 NULL；
seqno: 类型：u_int32_t；作用：序列号，初始值为 0

40-71：邻居节点添加函数neighbor_add()。
void NS_CLASS neighbor_add(AODV_msg * aodv_msg, struct in_addr source,
			   unsigned int ifindex)
    49-65：首先判断 source 指向的目的结点在路由表项中是否存在，若不存在则添加路由表项，rt_table_insert()函数根据传进的参数添加路由信息。如果此时是单向链路时则不需要更新任何路由信息。
    67-68：如果路由信息已存在且活跃，则应该增加对应路由的活跃周期即ALLOWED_HELLO_LOSS   *HELLO_INTERVAL。
73-206：邻居结点链路断开处理函数neighbor_link_break()。
void NS_CLASS neighbor_link_break(rt_table_t * rt)
如果hopcount=1，则这是一个直接邻居节点，并且发生了链接中断。发送具有递增序列号的RERR消息。
    84-85：对于路由表项是否存在的边界检测。
    87-91：对是否是邻居节点的边界检测。
    93-96：若跳数为 1 时(是邻居节点)，输出链路断开信息并将目的地址传入。此外在路由表中将相应路由表项置为无效。
    99-106：创建 rerr 消息：调用 rerr_create()函数，传入需要的目的地址和序列号。
    109-110：清空路由先驱列表。
    116-153：检查路由表中下一跳是地址不可达结点的表项。这些表项将不可使用，
因此要在 rerr 消息中包含这些信息。此外如果直接断裂的链路被标记修复那么
下一跳为不可达结点的所有链路都将被标记修复。
    157-169：确定新的先驱节点是否使这个成为非单播RERR。
    180-190：rerr消息的发送。
    194-201：判断只为包括断裂路由先驱结点的借口传递 RERR 消息。