routing_table.h中
30：typedef struct rt_table rt_table_t；
33~37：定义了邻居结构precursor。内含链表l，结构体in_addr neighbor,即ipv4地址；
38~40：定义宏
40：宏seqno_incr（s）用于使目的地序列号++的宏，若序列号为0，返回0；若FFFFFFFF，则返回1；否则，s++
42：typedef u_int32_t hash_value;顾名思义哈希值
45~62：定义了路由表rt_table内容。
list_t 		l;		链表
in_addr 	dest_addr;	目的地ip地址
u_int32_t	dest_seqno;	目的地序列号
unsigned int	ifindex;	网络接口(索引)
in_addr		next_hop;	下一跳地址
u_int8_t	hcnt;		目的地距离，跳数
u_int8_t	state;		The state of this entry?路由状态？什么状态
u_int16_t	flags;		routing flags?正确标记？什么意思取值到底为几？
timer		rt_timer;	The timer associated with this entry?;与这个入口关联的计时器
timer		ack_timer;	?
timer		hello_timer;	?
timeval		last_hello_timer;上次使用该路由表项的时间？
u_int8_t	hello_cnt;	?
hash_value	hash;		哈希值
int		nprec		?
list_t		precursors	链表，表示邻居；
65~71：宏route entry flags
74~75：宏route entry states
81~85：结构体routing_table
unsigned int	num_entries	?
unsigned int	num_active	?
list_t		tbl[64]		？
87：声明函数void precursor_list_destroy(rt_table_t * rt);从活跃的邻居链表中删除所有的节点？实现代码看不懂
92：声明一个routing_table结构体 rt_tbl，是个状态记录器，记录了路由表中活跃的，不活跃的路由表项
94：声明函数void rt_table_init();初始化路由表相关变量？INIT_LIST_HEAD是什么
95：声明函数void rt_table_destory();销毁路由表
96~99：rt_table_t *rt_table_insert(struct in_addr dest, struct in_addr next,
u_int8_t hops, u_int32_t seqno, u_int32_t life,
u_int8_t state, u_int16_t flags,
unsigned int ifindex)；增加一条路由表项，包括目的地址、下一跳地址、跳数、目的地序列号、生命期、路由状态、正确标记、网络接口。
100~102：rt_table_t *rt_table_update(***)
103~104：NS_INLINE rt_table_t *rt_table_update_timeout(***)
105：void rt_table_update_route_timeouts()
106：rt_table_t *rt_table_find(struct in_addr dest);

107：rt_table_t *rt_table_find_gateway();

108：int rt_table_update_inet_rt(rt_table_t * gw, u_int32_t life);

109：int rt_table_invalidate(rt_table_t * rt);

110：void rt_table_delete(rt_table_t * rt);

111：void precursor_add(rt_table_t * rt, struct in_addr addr);

112：void precursor_remove(rt_table_t * rt, struct in_addr addr);





routing_table.c中
44：外部int变量llfeedback

74~80：unsigned int hashing(struct in_addr *addr, hash_value * hash)计算哈希值
82~86：rt_table_insert函数头
88~93：声明变量
96：计算目的地址哈希值
99~108：遍历已有路由表，若已有相同目的地址表项，则报错，返回null；
110~113：为新增路由表项，申请一个rt_table大小的空间
115:将申请的空间初始化
117~124：将路由表相关信息写入空间内。
126~130：初始化了3个timer？
132~137：初始化变量
146~164：don‘t know
167~189：？

191：rt_table_t *NS_CLASS rt_table_update(rt_table_t * rt, struct in_addr next,
u_int8_t hops, u_int32_t seqno,
 u_int32_t lifetime, u_int8_t state,
u_int16_t flags)
函数头，传来的路由表项已过期，又再次活跃，则更新路由表
199：判断当前路由表无效，且参数state有效，进入循环，rt_tbl.num_active++；
206~207：如果路由表项的flags为10/11，进入代码块，将flags变为00/01；
210：nl_send_add_route_msg，送消息？走出if
214：else if （路由表项的下一跳地址不为0且下一跳地址不等于参数下一跳地址）
log记录，送信息？
226~235：if（跳数大于1,路由表项的跳数=1）则？
237~240：更新已有路由表项
243~269：？

271：NS_INLINE rt_table_t *NS_CLASS rt_table_update_timeout()函数头。更新路由表项中计时器
279：if（当前有效）（检查当前有效的超时是否大于新的超时――若大于，保留旧的超时 ）
	282：获取当前时间至new_timeout
	283：为new_timeout加上一个lifetime长度的时间
	285：if（现有的rt_timer.timeout<new_timeout）
		286：？
287：else
	288：
290：返回路由表

294：void NS_CLASS rt_table_update_route_timeouts函数头，更新输入(rec_vt)或输出(fwd_rt)包路由时的定时器
297：定义路由表项next_hop_rt(下一跳表项)；
在转发数据包时，我们更新目的地的路由表条目的生存期以及下一跳邻居的条目（如果不相同）
304：if(fwd_rt存在&&转发表项有效)
	306：if(llfeedback?||fwd_rt的flags&0x8||fwd_rt目标跳数不为1||fwd_rt->hello_timer.used)
		308：更新fwd_rt中计时器，生命周期为？
	310：下一跳next_hop_rt = fwd_rt的下一跳路由表项
	312：if(next_hop_rt&&下一跳状态有效&&下一跳目的IP地址等于fwd_rt的目的IP地址&&(llfeedback？||fwd_rt->hello.timer.user))
		315：更新下一跳表项的计时器，生命周期为？
因为发起者和目的地之间的路由应该是对称的，故沿着反向路径反向下一跳更新反向路由
322：if(rec_vt&&rec_vt状态有效)
	324：if(llfeedback?||rec_vt目标跳数不为1||rev_vt->hello_timer.used)
		325：更新rec_vt中的计时器，生命周期为
	327：next_hop_rt = rev_vt的下一跳路由表项
	329：if(next_hop_rt&&next_hop_rt->state有效&&rev_rt&&下一跳目的ip!=rev_rt目的ip&&(llfeedback||rev_rt->hello_timer.used))
		332：更新next_hop_rt的计时器

346：rt_table_t *NS_CLASS rt_table_find(struct in_addr dest_addr)根据目的地地址，寻找路由表项

373：rt_table_t *NS_CLASS rt_table_find_gateway()寻找本机的默认网关
383：存疑？rt->flags这里

393：int NS_CLASS rt_table_update_inet_rt(rt_table_t * gw, u_int32_t life)设置在默认状态下。所有包的下一跳均传给默认网关

418：int NS_CLASS rt_table_invalidate(rt_table_t * rt)若路由表项超时，则将其无效化
440~442：调用timer_remove函数，移除rt的三个计时器；
445~448：设置rt无效，状态记录器rt_tbl中有效个数--，rt->hello_cnt=0？；
当路由条目的生存期到期时，增加该条目的序列号。
452：序列号++
454~455：设置上次使用时间置零
458：调用nl_send_del_route_msg()函数
463~524：？

526：void NS_CLASS rt_table_delete(rt_table_t * rt)彻底删除一个路由表项
533：删除链表节点
559：void NS_CLASS precursor_add(rt_table_t * rt, struct in_addr addr)在某个路由表项的先驱表中，添加一个节点

598：void NS_CLASS precursor_remove(rt_table_t * rt, struct in_addr addr)在某个路由表项的先驱表中，删除一个节点

624：void precursor_list_destroy(rt_table_t * rt)将某个路由表项的先驱表删除